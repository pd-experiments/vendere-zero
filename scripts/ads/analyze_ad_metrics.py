#!/usr/bin/env python3
"""
Ad Metrics Analysis Script
--------------------------
This script analyzes and visualizes the enhanced ad metrics data generated by mock_ad_metrics.py.
It produces various charts and insights about ad performance across channels, demographics, and time.
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from helpers import get_supabase_client
from datetime import datetime, timedelta
import json
from typing import Dict, List, Optional, Any
import argparse

# Set plot styling
plt.style.use("ggplot")
sns.set_theme(style="whitegrid")
plt.rcParams["figure.figsize"] = (12, 8)


def fetch_metrics_data(
    campaign_id: Optional[str] = None, days: int = 30
) -> pd.DataFrame:
    """
    Fetch enhanced ad metrics data from the database

    Args:
        campaign_id: Optional campaign ID to filter by
        days: Number of days of data to retrieve (default 30)

    Returns:
        DataFrame containing the metrics data
    """
    supabase_client = get_supabase_client()

    # Calculate date range
    end_date = datetime.now()
    start_date = end_date - timedelta(days=days)

    # Build query
    query = supabase_client.table("enhanced_ad_metrics").select("*")

    # Apply filters if provided
    if campaign_id:
        query = query.eq("campaign_id", campaign_id)

    # Apply date filter
    query = query.gte("date", start_date.strftime("%Y-%m-%d"))

    # Execute query
    result = query.execute()

    # Convert to DataFrame
    df = pd.DataFrame(result.data)

    # Convert date to datetime
    if not df.empty and "date" in df.columns:
        df["date"] = pd.to_datetime(df["date"])

    # Expand JSON columns if they exist and the dataframe is not empty
    if not df.empty:
        json_columns = ["demographics", "device_metrics", "engagement", "placement"]
        for col in json_columns:
            if col in df.columns:
                # Check if column contains JSON data
                if isinstance(df[col].iloc[0], (dict, str)):
                    # If string, parse it
                    if isinstance(df[col].iloc[0], str):
                        df[col] = df[col].apply(
                            lambda x: json.loads(x) if isinstance(x, str) else x
                        )

                    # Create temporary dataframe from JSON column
                    temp_df = pd.json_normalize(df[col])

                    # Prefix column names with original column name
                    temp_df.columns = [f"{col}_{c}" for c in temp_df.columns]

                    # Join with original dataframe
                    df = pd.concat([df.drop(columns=[col]), temp_df], axis=1)

    return df


def visualize_channel_performance(df: pd.DataFrame, output_dir: str = "outputs"):
    """
    Visualize ad performance across different channels

    Args:
        df: DataFrame containing metrics data
        output_dir: Directory to save output files
    """
    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Aggregate data by channel
    channel_data = (
        df.groupby("channel")
        .agg(
            {"impressions": "sum", "clicks": "sum", "conversions": "sum", "cost": "sum"}
        )
        .reset_index()
    )

    # Calculate CTR and conversion rate
    channel_data["ctr"] = (channel_data["clicks"] / channel_data["impressions"]) * 100
    channel_data["conversion_rate"] = (
        channel_data["conversions"] / channel_data["clicks"]
    ) * 100
    channel_data["cpc"] = channel_data["cost"] / channel_data["clicks"]

    # Sort by impressions
    channel_data = channel_data.sort_values("impressions", ascending=False)

    # Create a figure with multiple subplots
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))

    # Plot impressions
    ax1 = axes[0, 0]
    sns.barplot(x="channel", y="impressions", data=channel_data, ax=ax1)
    ax1.set_title("Total Impressions by Channel")
    ax1.set_xticklabels(ax1.get_xticklabels(), rotation=45, ha="right")
    ax1.ticklabel_format(style="plain", axis="y")

    # Plot CTR
    ax2 = axes[0, 1]
    sns.barplot(x="channel", y="ctr", data=channel_data, ax=ax2)
    ax2.set_title("Click-Through Rate (CTR) by Channel (%)")
    ax2.set_xticklabels(ax2.get_xticklabels(), rotation=45, ha="right")

    # Plot conversion rate
    ax3 = axes[1, 0]
    sns.barplot(x="channel", y="conversion_rate", data=channel_data, ax=ax3)
    ax3.set_title("Conversion Rate by Channel (%)")
    ax3.set_xticklabels(ax3.get_xticklabels(), rotation=45, ha="right")

    # Plot CPC
    ax4 = axes[1, 1]
    sns.barplot(x="channel", y="cpc", data=channel_data, ax=ax4)
    ax4.set_title("Cost Per Click (CPC) by Channel")
    ax4.set_xticklabels(ax4.get_xticklabels(), rotation=45, ha="right")

    plt.tight_layout()
    plt.savefig(f"{output_dir}/channel_performance_overview.png")
    plt.close()

    print(
        f"Channel performance visualization saved to {output_dir}/channel_performance_overview.png"
    )

    # Return key insights
    return {
        "top_channel_by_impressions": channel_data.iloc[0]["channel"],
        "best_ctr_channel": channel_data.sort_values("ctr", ascending=False).iloc[0][
            "channel"
        ],
        "best_conversion_channel": channel_data.sort_values(
            "conversion_rate", ascending=False
        ).iloc[0]["channel"],
        "lowest_cpc_channel": channel_data.sort_values("cpc").iloc[0]["channel"],
    }


def visualize_demographic_performance(df: pd.DataFrame, output_dir: str = "outputs"):
    """
    Visualize performance across different demographic segments

    Args:
        df: DataFrame containing metrics data
        output_dir: Directory to save output files

    Returns:
        Dictionary with demographic insights
    """
    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Extract demographics data if available
    demo_columns = [col for col in df.columns if col.startswith("demographics_")]

    if not demo_columns:
        print("No demographics data found in the dataset")
        return {}

    # Extract age data if available
    age_columns = [col for col in demo_columns if "age_groups" in col]

    if age_columns:
        # Aggregate data by age group
        age_data = {}
        for col in age_columns:
            age_group = col.split(".")[-1]  # Extract age group from column name
            if age_group in ["18-24", "25-34", "35-44", "45-54", "55-64", "65+"]:
                # Calculate weighted metrics for this age group
                age_data[age_group] = {
                    "impressions": (df[col] * df["impressions"]).sum() / df[col].sum()
                    if df[col].sum() > 0
                    else 0,
                    "clicks": (df[col] * df["clicks"]).sum() / df[col].sum()
                    if df[col].sum() > 0
                    else 0,
                    "conversions": (df[col] * df["conversions"]).sum() / df[col].sum()
                    if df[col].sum() > 0
                    else 0,
                    "percentage": df[col].mean()
                    * 100,  # Average percentage across all records
                }

        if age_data:
            # Convert to DataFrame
            age_df = pd.DataFrame.from_dict(age_data, orient="index").reset_index()
            age_df.columns = [
                "age_group",
                "impressions",
                "clicks",
                "conversions",
                "percentage",
            ]

            # Calculate CTR and conversion rate
            age_df["ctr"] = (age_df["clicks"] / age_df["impressions"]) * 100
            age_df["conversion_rate"] = (age_df["conversions"] / age_df["clicks"]) * 100

            # Sort by age group
            age_order = ["18-24", "25-34", "35-44", "45-54", "55-64", "65+"]
            age_df["age_group"] = pd.Categorical(
                age_df["age_group"], categories=age_order, ordered=True
            )
            age_df = age_df.sort_values("age_group")

            # Create visualization
            fig, axes = plt.subplots(2, 2, figsize=(16, 12))

            # Plot audience percentage
            ax1 = axes[0, 0]
            sns.barplot(x="age_group", y="percentage", data=age_df, ax=ax1)
            ax1.set_title("Audience Distribution by Age Group (%)")

            # Plot impressions
            ax2 = axes[0, 1]
            sns.barplot(x="age_group", y="impressions", data=age_df, ax=ax2)
            ax2.set_title("Impressions by Age Group")
            ax2.ticklabel_format(style="plain", axis="y")

            # Plot CTR
            ax3 = axes[1, 0]
            sns.barplot(x="age_group", y="ctr", data=age_df, ax=ax3)
            ax3.set_title("CTR by Age Group (%)")

            # Plot conversion rate
            ax4 = axes[1, 1]
            sns.barplot(x="age_group", y="conversion_rate", data=age_df, ax=ax4)
            ax4.set_title("Conversion Rate by Age Group (%)")

            plt.tight_layout()
            plt.savefig(f"{output_dir}/age_performance.png")
            plt.close()

            print(
                f"Age demographics visualization saved to {output_dir}/age_performance.png"
            )

    # Extract gender data if available
    gender_columns = [col for col in demo_columns if "gender" in col]
    gender_insights = {}

    if gender_columns:
        # Aggregate data by gender
        gender_data = {}
        for col in gender_columns:
            gender = col.split(".")[-1]  # Extract gender from column name
            if gender in ["male", "female", "unknown"]:
                # Calculate weighted metrics for this gender
                gender_data[gender] = {
                    "impressions": (df[col] * df["impressions"]).sum() / df[col].sum()
                    if df[col].sum() > 0
                    else 0,
                    "clicks": (df[col] * df["clicks"]).sum() / df[col].sum()
                    if df[col].sum() > 0
                    else 0,
                    "conversions": (df[col] * df["conversions"]).sum() / df[col].sum()
                    if df[col].sum() > 0
                    else 0,
                    "percentage": df[col].mean()
                    * 100,  # Average percentage across all records
                }

        if gender_data:
            # Convert to DataFrame
            gender_df = pd.DataFrame.from_dict(
                gender_data, orient="index"
            ).reset_index()
            gender_df.columns = [
                "gender",
                "impressions",
                "clicks",
                "conversions",
                "percentage",
            ]

            # Calculate CTR and conversion rate
            gender_df["ctr"] = (gender_df["clicks"] / gender_df["impressions"]) * 100
            gender_df["conversion_rate"] = (
                gender_df["conversions"] / gender_df["clicks"]
            ) * 100

            # Create visualization
            plt.figure(figsize=(12, 10))

            # Create subplot for gender distribution
            plt.subplot(2, 2, 1)
            gender_colors = {
                "male": "#1f77b4",
                "female": "#ff7f0e",
                "unknown": "#2ca02c",
            }
            plt.pie(
                gender_df["percentage"],
                labels=gender_df["gender"],
                autopct="%1.1f%%",
                colors=[gender_colors.get(g, "#333333") for g in gender_df["gender"]],
            )
            plt.title("Audience Gender Distribution")

            # Create subplot for CTR by gender
            plt.subplot(2, 2, 2)
            sns.barplot(x="gender", y="ctr", data=gender_df)
            plt.title("CTR by Gender (%)")

            # Create subplot for conversion rate by gender
            plt.subplot(2, 2, 3)
            sns.barplot(x="gender", y="conversion_rate", data=gender_df)
            plt.title("Conversion Rate by Gender (%)")

            # Create subplot for impressions by gender
            plt.subplot(2, 2, 4)
            sns.barplot(x="gender", y="impressions", data=gender_df)
            plt.title("Impressions by Gender")
            plt.ticklabel_format(style="plain", axis="y")

            plt.tight_layout()
            plt.savefig(f"{output_dir}/gender_performance.png")
            plt.close()

            print(
                f"Gender demographics visualization saved to {output_dir}/gender_performance.png"
            )

            # Find best performing gender
            gender_insights = {
                "best_ctr_gender": gender_df.sort_values("ctr", ascending=False).iloc[
                    0
                ]["gender"],
                "best_conversion_gender": gender_df.sort_values(
                    "conversion_rate", ascending=False
                ).iloc[0]["gender"],
            }

    return gender_insights


def visualize_time_trends(df: pd.DataFrame, output_dir: str = "outputs"):
    """
    Visualize performance trends over time

    Args:
        df: DataFrame containing metrics data
        output_dir: Directory to save output files

    Returns:
        Dictionary with time-based insights
    """
    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Ensure date column exists
    if "date" not in df.columns:
        print("No date column found in the dataset")
        return {}

    # Group by date and aggregate metrics
    daily_metrics = (
        df.groupby("date")
        .agg(
            {"impressions": "sum", "clicks": "sum", "conversions": "sum", "cost": "sum"}
        )
        .reset_index()
    )

    # Calculate daily CTR, conversion rate, and CPC
    daily_metrics["ctr"] = (
        daily_metrics["clicks"] / daily_metrics["impressions"]
    ) * 100
    daily_metrics["conversion_rate"] = (
        daily_metrics["conversions"] / daily_metrics["clicks"]
    ) * 100
    daily_metrics["cpc"] = daily_metrics["cost"] / daily_metrics["clicks"]

    # Calculate 7-day moving averages
    daily_metrics["impressions_7d_avg"] = (
        daily_metrics["impressions"].rolling(window=7, min_periods=1).mean()
    )
    daily_metrics["ctr_7d_avg"] = (
        daily_metrics["ctr"].rolling(window=7, min_periods=1).mean()
    )
    daily_metrics["conversion_rate_7d_avg"] = (
        daily_metrics["conversion_rate"].rolling(window=7, min_periods=1).mean()
    )

    # Create time trend visualization
    fig, axes = plt.subplots(3, 1, figsize=(16, 18))

    # Plot impressions over time
    ax1 = axes[0]
    sns.lineplot(
        x="date", y="impressions", data=daily_metrics, marker="o", label="Daily", ax=ax1
    )
    sns.lineplot(
        x="date",
        y="impressions_7d_avg",
        data=daily_metrics,
        marker="",
        linewidth=3,
        label="7-day Avg",
        ax=ax1,
    )
    ax1.set_title("Daily Impressions")
    ax1.ticklabel_format(style="plain", axis="y")
    ax1.grid(True, alpha=0.3)
    ax1.legend()

    # Plot CTR over time
    ax2 = axes[1]
    sns.lineplot(
        x="date", y="ctr", data=daily_metrics, marker="o", label="Daily", ax=ax2
    )
    sns.lineplot(
        x="date",
        y="ctr_7d_avg",
        data=daily_metrics,
        marker="",
        linewidth=3,
        label="7-day Avg",
        ax=ax2,
    )
    ax2.set_title("Daily CTR (%)")
    ax2.grid(True, alpha=0.3)
    ax2.legend()

    # Plot conversion rate over time
    ax3 = axes[2]
    sns.lineplot(
        x="date",
        y="conversion_rate",
        data=daily_metrics,
        marker="o",
        label="Daily",
        ax=ax3,
    )
    sns.lineplot(
        x="date",
        y="conversion_rate_7d_avg",
        data=daily_metrics,
        marker="",
        linewidth=3,
        label="7-day Avg",
        ax=ax3,
    )
    ax3.set_title("Daily Conversion Rate (%)")
    ax3.grid(True, alpha=0.3)
    ax3.legend()

    plt.tight_layout()
    plt.savefig(f"{output_dir}/time_trends.png")
    plt.close()

    print(f"Time trend visualization saved to {output_dir}/time_trends.png")

    # Also create channel performance over time
    channel_time_data = (
        df.groupby(["date", "channel"])
        .agg({"impressions": "sum", "clicks": "sum", "conversions": "sum"})
        .reset_index()
    )

    # Calculate CTR and conversion rate
    channel_time_data["ctr"] = (
        channel_time_data["clicks"] / channel_time_data["impressions"]
    ) * 100

    # Plot channel CTR over time
    plt.figure(figsize=(16, 10))
    sns.lineplot(x="date", y="ctr", hue="channel", data=channel_time_data, marker="o")
    plt.title("CTR by Channel Over Time")
    plt.grid(True, alpha=0.3)
    plt.legend(title="Channel", bbox_to_anchor=(1.05, 1), loc="upper left")
    plt.tight_layout()
    plt.savefig(f"{output_dir}/channel_time_trends.png")
    plt.close()

    print(
        f"Channel time trend visualization saved to {output_dir}/channel_time_trends.png"
    )

    # Calculate insights
    recent_data = daily_metrics.tail(7)  # Last 7 days
    older_data = daily_metrics.iloc[:-7].tail(7)  # 7 days before that

    ctr_change = (
        (recent_data["ctr"].mean() - older_data["ctr"].mean())
        / older_data["ctr"].mean()
        * 100
        if older_data["ctr"].mean() > 0
        else 0
    )
    conv_change = (
        (recent_data["conversion_rate"].mean() - older_data["conversion_rate"].mean())
        / older_data["conversion_rate"].mean()
        * 100
        if older_data["conversion_rate"].mean() > 0
        else 0
    )

    return {
        "ctr_trend": "increasing"
        if ctr_change > 5
        else ("decreasing" if ctr_change < -5 else "stable"),
        "ctr_change_percent": ctr_change,
        "conversion_trend": "increasing"
        if conv_change > 5
        else ("decreasing" if conv_change < -5 else "stable"),
        "conversion_change_percent": conv_change,
        "best_day_of_week": daily_metrics.groupby(daily_metrics["date"].dt.day_name())[
            "ctr"
        ]
        .mean()
        .sort_values(ascending=False)
        .index[0],
    }


def visualize_device_performance(df: pd.DataFrame, output_dir: str = "outputs"):
    """
    Visualize performance across different devices

    Args:
        df: DataFrame containing metrics data
        output_dir: Directory to save output files

    Returns:
        Dictionary with device insights
    """
    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Extract device metrics if available
    device_columns = [col for col in df.columns if col.startswith("device_metrics_")]

    if not device_columns:
        print("No device metrics data found in the dataset")
        return {}

    # Calculate weighted metrics for each device type
    device_data = {}

    # For desktop
    if "device_metrics_desktop" in device_columns:
        desktop_percentage = df["device_metrics_desktop"].mean() * 100
        desktop_impressions = (df["device_metrics_desktop"] * df["impressions"]).sum()
        desktop_clicks = (df["device_metrics_desktop"] * df["clicks"]).sum()
        desktop_conversions = (df["device_metrics_desktop"] * df["conversions"]).sum()
        device_data["Desktop"] = {
            "percentage": desktop_percentage,
            "impressions": desktop_impressions,
            "clicks": desktop_clicks,
            "conversions": desktop_conversions,
        }

    # For mobile
    if "device_metrics_mobile" in device_columns:
        mobile_percentage = df["device_metrics_mobile"].mean() * 100
        mobile_impressions = (df["device_metrics_mobile"] * df["impressions"]).sum()
        mobile_clicks = (df["device_metrics_mobile"] * df["clicks"]).sum()
        mobile_conversions = (df["device_metrics_mobile"] * df["conversions"]).sum()
        device_data["Mobile"] = {
            "percentage": mobile_percentage,
            "impressions": mobile_impressions,
            "clicks": mobile_clicks,
            "conversions": mobile_conversions,
        }

    # For tablet
    if "device_metrics_tablet" in device_columns:
        tablet_percentage = df["device_metrics_tablet"].mean() * 100
        tablet_impressions = (df["device_metrics_tablet"] * df["impressions"]).sum()
        tablet_clicks = (df["device_metrics_tablet"] * df["clicks"]).sum()
        tablet_conversions = (df["device_metrics_tablet"] * df["conversions"]).sum()
        device_data["Tablet"] = {
            "percentage": tablet_percentage,
            "impressions": tablet_impressions,
            "clicks": tablet_clicks,
            "conversions": tablet_conversions,
        }

    if device_data:
        # Convert to DataFrame
        device_df = pd.DataFrame.from_dict(device_data, orient="index").reset_index()
        device_df.columns = [
            "device",
            "percentage",
            "impressions",
            "clicks",
            "conversions",
        ]

        # Calculate CTR and conversion rate
        device_df["ctr"] = (device_df["clicks"] / device_df["impressions"]) * 100
        device_df["conversion_rate"] = (
            device_df["conversions"] / device_df["clicks"]
        ) * 100

        # Create visualization
        fig, axes = plt.subplots(2, 2, figsize=(16, 12))

        # Plot device distribution
        ax1 = axes[0, 0]
        plt.sca(ax1)
        device_colors = {"Desktop": "#1f77b4", "Mobile": "#ff7f0e", "Tablet": "#2ca02c"}
        plt.pie(
            device_df["percentage"],
            labels=device_df["device"],
            autopct="%1.1f%%",
            colors=[device_colors.get(d, "#333333") for d in device_df["device"]],
        )
        plt.title("Traffic by Device Type")

        # Plot impressions by device
        ax2 = axes[0, 1]
        sns.barplot(x="device", y="impressions", data=device_df, ax=ax2)
        ax2.set_title("Impressions by Device")
        ax2.ticklabel_format(style="plain", axis="y")

        # Plot CTR by device
        ax3 = axes[1, 0]
        sns.barplot(x="device", y="ctr", data=device_df, ax=ax3)
        ax3.set_title("CTR by Device (%)")

        # Plot conversion rate by device
        ax4 = axes[1, 1]
        sns.barplot(x="device", y="conversion_rate", data=device_df, ax=ax4)
        ax4.set_title("Conversion Rate by Device (%)")

        plt.tight_layout()
        plt.savefig(f"{output_dir}/device_performance.png")
        plt.close()

        print(
            f"Device performance visualization saved to {output_dir}/device_performance.png"
        )

        # Return insights
        device_insights = {
            "dominant_device": device_df.sort_values(
                "percentage", ascending=False
            ).iloc[0]["device"],
            "highest_ctr_device": device_df.sort_values("ctr", ascending=False).iloc[0][
                "device"
            ],
            "highest_conversion_device": device_df.sort_values(
                "conversion_rate", ascending=False
            ).iloc[0]["device"],
        }

        return device_insights

    return {}


def generate_insights_report(insights: Dict[str, Any], output_dir: str = "outputs"):
    """
    Generate a text report with key insights from the analysis

    Args:
        insights: Dictionary with insights from various analysis functions
        output_dir: Directory to save output files
    """
    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)

    report = """
# Ad Performance Insights Report

## Channel Performance
"""

    if "top_channel_by_impressions" in insights:
        report += f"- The top performing channel by impressions is **{insights['top_channel_by_impressions']}**\n"
    if "best_ctr_channel" in insights:
        report += f"- The channel with the highest CTR is **{insights['best_ctr_channel']}**\n"
    if "best_conversion_channel" in insights:
        report += f"- The channel with the highest conversion rate is **{insights['best_conversion_channel']}**\n"
    if "lowest_cpc_channel" in insights:
        report += f"- The most cost-effective channel (lowest CPC) is **{insights['lowest_cpc_channel']}**\n"

    report += """
## Demographic Insights
"""

    if "best_ctr_gender" in insights:
        report += (
            f"- The gender with the highest CTR is **{insights['best_ctr_gender']}**\n"
        )
    if "best_conversion_gender" in insights:
        report += f"- The gender with the highest conversion rate is **{insights['best_conversion_gender']}**\n"

    report += """
## Device Performance
"""

    if "dominant_device" in insights:
        report += f"- The dominant device type in our traffic is **{insights['dominant_device']}**\n"
    if "highest_ctr_device" in insights:
        report += f"- The device with the highest CTR is **{insights['highest_ctr_device']}**\n"
    if "highest_conversion_device" in insights:
        report += f"- The device with the highest conversion rate is **{insights['highest_conversion_device']}**\n"

    report += """
## Time Trends
"""

    if "ctr_trend" in insights:
        report += f"- CTR is **{insights['ctr_trend']}** ({insights['ctr_change_percent']:.1f}% change over last 7 days)\n"
    if "conversion_trend" in insights:
        report += f"- Conversion rate is **{insights['conversion_trend']}** ({insights['conversion_change_percent']:.1f}% change over last 7 days)\n"
    if "best_day_of_week" in insights:
        report += f"- The best performing day of the week is **{insights['best_day_of_week']}**\n"

    report += """
## Recommendations

Based on the analysis, consider the following recommendations:
"""

    # Generate recommendations based on insights
    recommendations = []

    if "best_conversion_channel" in insights and "best_ctr_channel" in insights:
        if insights["best_conversion_channel"] == insights["best_ctr_channel"]:
            recommendations.append(
                f"- Increase budget allocation to {insights['best_conversion_channel']} as it delivers both the highest CTR and conversion rate"
            )
        else:
            recommendations.append(
                f"- For brand awareness campaigns, focus on {insights['best_ctr_channel']} (highest CTR)"
            )
            recommendations.append(
                f"- For conversion-focused campaigns, prioritize {insights['best_conversion_channel']} (highest conversion rate)"
            )

    if "highest_conversion_device" in insights:
        recommendations.append(
            f"- Optimize landing pages for {insights['highest_conversion_device']} users to capitalize on the higher conversion rate"
        )

    if "ctr_trend" in insights and insights["ctr_trend"] == "decreasing":
        recommendations.append("- Review ad creative and messaging as CTR is declining")

    if "conversion_trend" in insights and insights["conversion_trend"] == "decreasing":
        recommendations.append(
            "- Audit landing pages and conversion paths as conversion rates are declining"
        )

    if "best_day_of_week" in insights:
        recommendations.append(
            f"- Consider dayparting strategies to increase bids on {insights['best_day_of_week']}"
        )

    # Add default recommendation if none were generated
    if not recommendations:
        recommendations.append(
            "- Continue monitoring performance across all channels and segments"
        )
        recommendations.append(
            "- Consider A/B testing ad creatives to identify opportunities for improvement"
        )

    report += "\n".join(recommendations)

    # Write report to file
    with open(f"{output_dir}/insights_report.md", "w") as f:
        f.write(report)

    print(f"Insights report saved to {output_dir}/insights_report.md")

    return report


def main():
    """Main function to run the analysis"""
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="Analyze enhanced ad metrics data")
    parser.add_argument("--campaign", help="Campaign ID to filter by")
    parser.add_argument(
        "--days", type=int, default=30, help="Number of days of data to analyze"
    )
    parser.add_argument(
        "--output", default="outputs", help="Directory to save output files"
    )
    args = parser.parse_args()

    print(f"Starting ad metrics analysis for the last {args.days} days...")
    if args.campaign:
        print(f"Filtering by campaign ID: {args.campaign}")

    # Fetch data
    print("Fetching data from database...")
    df = fetch_metrics_data(campaign_id=args.campaign, days=args.days)

    if df.empty:
        print(
            "No data found. Please check your filters or run mock_ad_metrics.py to generate data."
        )
        return

    print(f"Retrieved {len(df)} records.")

    # Run visualizations and collect insights
    print("Generating visualizations and insights...")
    all_insights = {}

    # Channel performance
    channel_insights = visualize_channel_performance(df, args.output)
    all_insights.update(channel_insights)

    # Demographic performance
    demo_insights = visualize_demographic_performance(df, args.output)
    all_insights.update(demo_insights)

    # Time trends
    time_insights = visualize_time_trends(df, args.output)
    all_insights.update(time_insights)

    # Device performance
    device_insights = visualize_device_performance(df, args.output)
    all_insights.update(device_insights)

    # Generate insights report
    print("Generating insights report...")
    generate_insights_report(all_insights, args.output)

    print(
        "\nAnalysis complete! Check the output directory for visualizations and insights report."
    )


if __name__ == "__main__":
    main()
